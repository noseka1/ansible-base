- import_tasks: get_argocd_route.yml

- import_role:
    name: openshift_rhbk
    tasks_from: get_connection.yml

- import_role:
    name: openshift_rhbk
    tasks_from: get_access_token.yml

- name: Obtain list of realms
  uri:
    url: https://{{ rhbk_hostname }}/admin/realms
    headers:
      Authorization: bearer {{ rhbk_access_token }}
    validate_certs: false
    status_code: [ 200 ]
  register: realms_list_result

- name: Create realm "argocd" if it doesn't exist
  uri:
    url: https://{{ rhbk_hostname }}/admin/realms
    method: POST
    headers:
      Authorization: bearer {{ rhbk_access_token }}
    body_format: json
    body:
      id: argocd
      realm: argocd
      displayName: Argo CD
      enabled: true
    validate_certs: false
    status_code: [ 201 ]
  when: (realms_list_result.json | selectattr("id", "equalto", "argocd") | list| length) == 0

- name: Obtain list of client scopes
  uri:
    url: https://{{ rhbk_hostname }}/admin/realms/argocd/client-scopes
    headers:
      Authorization: bearer {{ rhbk_access_token }}
    validate_certs: false
    status_code: [ 200 ]
  register: client_scopes_list_result

- name: Create client scope "groups" if it doesn't exist
  uri:
    url: https://{{ rhbk_hostname }}/admin/realms/argocd/client-scopes
    method: POST
    headers:
      Authorization: bearer {{ rhbk_access_token }}
    body_format: json
    body:
      attributes:
        display.on.consent.screen: "true"
        include.in.token.scope: "true"
      name: groups
      protocol: openid-connect
      protocolMappers:
        - config:
            access.token.claim: "true"
            claim.name: groups
            full.path: "true"
            id.token.claim: "true"
            userinfo.token.claim: "true"
          consentRequired: false
          name: groups
          protocol: openid-connect
          protocolMapper: oidc-group-membership-mapper
    validate_certs: false
    status_code: [ 201 ]
  when: (client_scopes_list_result.json | selectattr("name", "equalto", "groups") | list | length) == 0

- name: Obtain list of clients
  uri:
    url: https://{{ rhbk_hostname }}/admin/realms/argocd/clients
    headers:
      Authorization: bearer {{ rhbk_access_token }}
    validate_certs: false
    status_code: [ 200 ]
  register: clients_list_result

- name: Create client "argocd" if it doesn't exist
  uri:
    url: https://{{ rhbk_hostname }}/admin/realms/argocd/clients
    method: POST
    headers:
      Authorization: bearer {{ rhbk_access_token }}
    body_format: json
    body:
      baseUrl: /applications
      clientAuthenticatorType: client-secret
      clientId: argocd
      defaultClientScopes:
        - web-origins
        - role_list
        - profile
        - roles
        - email
        - groups
      description: Argo CD client
      name: Argo CD
      protocol: openid-connect
      publicClient: false
      rootUrl: https://{{ argocd_route.resources.0.spec.host }}
      redirectUris:
        - https://{{ argocd_route.resources.0.spec.host }}/auth/callback
    validate_certs: false
    status_code: [ 201 ]
  when: (clients_list_result.json | selectattr("clientId", "equalto", "argocd") | list | length) == 0

- name: Obtain list of clients
  uri:
    url: https://{{ rhbk_hostname }}/admin/realms/argocd/clients
    headers:
      Authorization: bearer {{ rhbk_access_token }}
    validate_certs: false
    status_code: [ 200 ]
  register: clients_list_result

- set_fact:
    client_id: '{{ (clients_list_result.json | selectattr("clientId", "equalto", "argocd") | first).id }}'

- name: Retrieve client secret
  uri:
    url: https://{{ rhbk_hostname }}/admin/realms/argocd/clients/{{ client_id }}/client-secret
    headers:
      Authorization: bearer {{ rhbk_access_token }}
    validate_certs: false
    status_code: [ 200 ]
  register: client_secret_result

- name: Obtain list of groups
  uri:
    url: https://{{ rhbk_hostname }}/admin/realms/argocd/groups
    headers:
      Authorization: bearer {{ rhbk_access_token }}
    validate_certs: false
    status_code: [ 200 ]
  register: groups_list_result

- name: Create group "ArgoCDAdmins" if it doesn't exist
  uri:
    url: https://{{ rhbk_hostname }}/admin/realms/argocd/groups
    method: POST
    headers:
      Authorization: bearer {{ rhbk_access_token }}
    body_format: json
    body:
      name: ArgoCDAdmins
    validate_certs: false
    status_code: [ 201 ]
  when: (groups_list_result.json | selectattr("name", "equalto", "ArgoCDAdmins") | list | length) == 0

- name: Obtain Kubernetes API server URL
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Infrastructure
    name: cluster
  register: infrastructure_result

- name: Obtain list of identity providers
  uri:
    url: https://{{ rhbk_hostname }}/admin/realms/argocd/identity-provider/instances
    headers:
      Authorization: bearer {{ rhbk_access_token }}
    validate_certs: false
    status_code: [ 200 ]
  register: identity_providers_list_result

- name: Create identity provider "openshift-v4" if it doesn't exist
  uri:
    url: https://{{ rhbk_hostname }}/admin/realms/argocd/identity-provider/instances
    method: POST
    headers:
      Authorization: bearer {{ rhbk_access_token }}
    body_format: json
    body:
      alias: openshift-v4
      config:
        baseUrl: '{{ infrastructure_result.resources.0.status.apiServerURL }}'
        clientId: keycloak-broker
        clientSecret: keycloak
      enabled: true
      providerId: openshift-v4
    validate_certs: false
    status_code: [ 201 ]
  when: (identity_providers_list_result.json | selectattr("providerId", "equalto", "openshift-v4") | list | length) == 0

- name: Obtain list of flow executions for authentication flow "first broker login"
  uri:
    url: https://{{ rhbk_hostname }}/admin/realms/argocd/authentication/flows/first%20broker%20login/executions
    headers:
      Authorization: bearer {{ rhbk_access_token }}
    validate_certs: false
    status_code: [ 200 ]
  register: authentication_flow_executions_list_result

- set_fact:
    review_profile_config_execution: '{{ authentication_flow_executions_list_result.json | selectattr("alias", "defined") | selectattr("alias", "equalto", "review profile config") | first }}'

- name: Disable review profile config execution (removes Update Account Information dialog)
  uri:
    url: https://{{ rhbk_hostname }}/admin/realms/argocd/authentication/flows/first%20broker%20login/executions
    method: PUT
    headers:
      Authorization: bearer {{ rhbk_access_token }}
    body_format: json
    body:
      id: '{{ review_profile_config_execution.id }}'
      requirement: DISABLED
    validate_certs: false
    status_code: [ 202, 204 ]
  when: review_profile_config_execution.requirement != "DISABLED"
