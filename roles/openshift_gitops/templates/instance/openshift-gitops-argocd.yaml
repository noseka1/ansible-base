apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: {{ gitops_instance_name }}
  namespace: {{ gitops_instance_namespace }}
spec:
  applicationSet:
    resources:
      limits:
        cpu: "2"
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
    sourceNamespaces:
      - ag-{{ openshift_common_cluster_domain | regex_replace('\.', '-') }}
    webhookServer:
      ingress:
        enabled: false
      route:
        enabled: false
  controller:
    processors: {}
    resources:
      limits:
        cpu: "2"
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 1Gi
    sharding: {}
  grafana:
    enabled: false
  ha:
    enabled: {{ gitops_instance_high_availability }}
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  initialSSHKnownHosts: {}
  monitoring:
    enabled: true
    disableMetrics: false
  notifications:
    enabled: true
    env:
    - name: ARGOCD_APPLICATION_NAMESPACES
      value: '*'
    - name: ARGOCD_NOTIFICATION_CONTROLLER_SELF_SERVICE_NOTIFICATION_ENABLED
      value: 'true'
  prometheus:
    enabled: false
  rbac:
    defaultPolicy: 'role:readonly'
    policy: |
      g, system:cluster-admins, role:admin
      g, cluster-admins, role:admin
    scopes: '[groups]'
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  repo:
    replicas: 1
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
    volumeMounts:
    - mountPath: /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
      subPath: ca-bundle.crt
      name: trusted-ca-bundle
    volumes:
      - configMap:
          name: trusted-ca-bundle
        name: trusted-ca-bundle
        optional: true
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
  server:
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    ingress:
      enabled: false
    # Configure TLS edge-terminated route instead of passthrough
    # so that the route utilizes the OpenShift wildcard certificate
    insecure: true
    replicas: 1
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 125m
        memory: 128Mi
    route:
      enabled: true
    service:
      type: ""
  sso:
    dex:
      openShiftOAuth: true
      resources:
        limits:
          cpu: 500m
          memory: 256Mi
        requests:
          cpu: 250m
          memory: 128Mi
    provider: dex
  sourceNamespaces:
    - ag-{{ openshift_common_cluster_domain | regex_replace('\.', '-') }}
  tls:
    ca: {}
  # Enable Helm templating in Kustomize
  kustomizeBuildOptions: --enable-helm
  extraConfig:
    # The default label-based tracking fails due to the label value must be no more than 63 characters long.
    # Switch to resource tracking using annotations.
    # See also https://argo-cd.readthedocs.io/en/stable/user-guide/resource_tracking/
    application.resourceTrackingMethod: annotation
    # See also Known Kubernetes types in CRDs (Resource limits, Volume mounts etc)
    # https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#known-kubernetes-types-in-crds-resource-limits-volume-mounts-etc
    # This makes the sonarqube-postgresql StatefulSet sync
    resource.customizations.knownTypeFields.apps_StatefulSet: |
      - field: spec.volumeClaimTemplates
        type: core/v1/PersistentVolumeClaimTemplate
    # This makes KubeVirt VirtualMachine objects sync
    resource.customizations.ignoreDifferences.kubevirt.io_VirtualMachine: |
      jqPathExpressions:
        - .spec.template.spec.domain.devices.interfaces[].macAddress
    # Extend the expiration period of the user authentication token generated by Argo CD. Default is 24 hours.
    users.session.duration: '31d'
    # By default, all connections made by the API server to OIDC providers must pass certificate validation.
    # See also https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#skipping-certificate-verification-on-oidc-provider-connections
    oidc.tls.insecure.skip.verify: '{{ gitops_instance_oidc_tls_insecure_skip_verify }}'
    # Fix reconciliation of Route object in openshift_hashicorp_vault role
    # See also https://github.com/argoproj/argo-cd/issues/17358
    controller.diff.server.side: "true"
  resourceExclusions: |
    # Argo CD should ignore Backup and Restore objects managed by Velero
    # See also https://velero.io/docs/v1.14/backup-reference/
    - apiGroups:
      - velero.io
      kinds:
      - Backup
      - Restore
      clusters:
      - "*"
    # The Argo CD resource tracking annotation is propagated from Namespace to the Project object. Argo CD should ignore
    # the Project managed by OpenShift. We prefer using Kubernetes-native Namespaces and no Projects. Argo CD must ignore
    # the Project to delete a Namespace successfully. Note that this was not needed for label-based resource tracking.
    - apiGroups:
      - project.openshift.io
      kinds:
      - Project
      clusters:
      - "*"
  resourceHealthChecks:
{% for item in gitops_instance_health_check_files.files %}
    - group: {{ item.path | dirname | dirname | basename }}
      kind: {{ item.path | dirname | basename }}
      check: |
        {{ lookup('file', item.path, rstrip=false) | indent(8) }}
{% endfor %}
